// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SC.v1.Data.Domain.Models;

#nullable disable

namespace SC.v1.Data.Domain.Migrations
{
    [DbContext(typeof(MyCompanyContext))]
    [Migration("20230807041813_SeedUserRoles")]
    partial class SeedUserRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId")
                        .HasName("categories_pkey");

                    b.HasIndex(new[] { "CategoryName" }, "categories_category_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "idx_categories_id");

                    b.ToTable("categories", null, t =>
                        {
                            t.HasComment("Tabla para manejar categorías de productos");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color_name");

                    b.HasKey("ColorId")
                        .HasName("colors_pkey");

                    b.HasIndex(new[] { "ColorName" }, "colors_color_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "ColorId" }, "idx_colors_id");

                    b.ToTable("colors", null, t =>
                        {
                            t.HasComment("Tabla para manejar colores de productos");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("company_address");

                    b.Property<string>("CompanyEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_email");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company_phone");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_website");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person_email");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person_name");

                    b.Property<string>("ContactPersonPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_person_phone");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registration_number");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_id");

                    b.HasKey("CompanyId")
                        .HasName("company_pkey");

                    b.HasIndex(new[] { "CompanyName" }, "company_company_name_key")
                        .IsUnique();

                    b.ToTable("company", null, t =>
                        {
                            t.HasComment("Tabla para manejar empresas");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ElectronicInvoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("invoice_number");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issue_date");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("InvoiceId")
                        .HasName("electronic_invoices_pkey");

                    b.HasIndex("TransactionId");

                    b.HasIndex(new[] { "InvoiceNumber" }, "electronic_invoices_invoice_number_key")
                        .IsUnique();

                    b.HasIndex(new[] { "InvoiceId" }, "idx_electronic_invoices_id");

                    b.ToTable("electronic_invoices", null, t =>
                        {
                            t.HasComment("Tabla para manejar facturas electrónicas");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ElectronicInvoiceItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("ItemId")
                        .HasName("electronic_invoice_items_pkey");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ItemId" }, "idx_electronic_invoice_items_id");

                    b.ToTable("electronic_invoice_items", null, t =>
                        {
                            t.HasComment("Tabla para manejar ítems de factura electrónica");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Inventory", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.HasKey("ProductId")
                        .HasName("inventory_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.HasIndex(new[] { "ProductId" }, "idx_inventory_id");

                    b.HasIndex(new[] { "ProductName" }, "inventory_product_name_key")
                        .IsUnique();

                    b.ToTable("inventory", null, t =>
                        {
                            t.HasComment("Tabla para manejar el inventario");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Payroll", b =>
                {
                    b.Property<int>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payroll_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PayrollId"));

                    b.Property<DateOnly>("PayrollDate")
                        .HasColumnType("date")
                        .HasColumnName("payroll_date");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("PayrollId")
                        .HasName("payroll_pkey");

                    b.HasIndex("TransactionId");

                    b.HasIndex(new[] { "PayrollId" }, "idx_payroll_id");

                    b.ToTable("payroll", null, t =>
                        {
                            t.HasComment("Tabla para manejar nómina");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.PayrollItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int?>("PayrollId")
                        .HasColumnType("integer")
                        .HasColumnName("payroll_id");

                    b.HasKey("ItemId")
                        .HasName("payroll_items_pkey");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex(new[] { "ItemId" }, "idx_payroll_items_id");

                    b.ToTable("payroll_items", null, t =>
                        {
                            t.HasComment("Tabla para manejar ítems de nómina");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SizeId"));

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("size_name");

                    b.HasKey("SizeId")
                        .HasName("sizes_pkey");

                    b.HasIndex(new[] { "SizeId" }, "idx_sizes_id");

                    b.HasIndex(new[] { "SizeName" }, "sizes_size_name_key")
                        .IsUnique();

                    b.ToTable("sizes", null, t =>
                        {
                            t.HasComment("Tabla para manejar tallas de productos");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ThirdParty", b =>
                {
                    b.Property<int>("ThirdPartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("third_party_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ThirdPartyId"));

                    b.Property<string>("IdNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("id_number");

                    b.Property<string>("IdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id_type");

                    b.Property<string>("ThirdPartyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("third_party_name");

                    b.Property<string>("ThirdPartyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("third_party_type");

                    b.HasKey("ThirdPartyId")
                        .HasName("third_parties_pkey");

                    b.HasIndex(new[] { "ThirdPartyId" }, "idx_third_parties_id");

                    b.HasIndex(new[] { "IdNumber" }, "third_parties_id_number_key")
                        .IsUnique();

                    b.ToTable("third_parties", null, t =>
                        {
                            t.HasComment("Tabla para manejar terceros como clientes, proveedores y asesores");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("transactions_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TransactionId" }, "idx_transactions_id");

                    b.HasIndex(new[] { "TypeId" }, "idx_transactions_type_id");

                    b.ToTable("transactions", null, t =>
                        {
                            t.HasComment("Tabla para manejar las transacciones");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.TransactionLine", b =>
                {
                    b.Property<int>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("line_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LineId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("LineId")
                        .HasName("transaction_lines_pkey");

                    b.HasIndex(new[] { "LineId" }, "idx_transaction_lines_id");

                    b.HasIndex(new[] { "TransactionId" }, "idx_transaction_lines_transaction_id");

                    b.ToTable("transaction_lines", null, t =>
                        {
                            t.HasComment("Tabla para manejar las líneas de las transacciones");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.TransactionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("transaction_types_pkey");

                    b.HasIndex(new[] { "TypeId" }, "idx_transaction_types_id");

                    b.HasIndex(new[] { "TypeName" }, "transaction_types_type_name_key")
                        .IsUnique();

                    b.ToTable("transaction_types", null, t =>
                        {
                            t.HasComment("Tabla para manejar los diferentes tipos de transacciones");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character(64)")
                        .HasColumnName("password_hash")
                        .IsFixedLength();

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("user_role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserId" }, "idx_users_id");

                    b.HasIndex(new[] { "UserName" }, "users_user_name_key")
                        .IsUnique();

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Tabla para manejar usuarios y autenticación");
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("user_roles_pkey");

                    b.HasIndex(new[] { "RoleName" }, "user_roles_role_name_key")
                        .IsUnique();

                    b.ToTable("user_roles", null, t =>
                        {
                            t.HasComment("Tabla para manejar los roles de usuario");
                        });

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Cliente"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Contador"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Proveedor"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Gerente"
                        },
                        new
                        {
                            RoleId = 6,
                            RoleName = "Auditor"
                        },
                        new
                        {
                            RoleId = 7,
                            RoleName = "Asesor"
                        });
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ElectronicInvoice", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.Transaction", "Transaction")
                        .WithMany("ElectronicInvoices")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("electronic_invoices_transaction_id_fkey");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ElectronicInvoiceItem", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.ElectronicInvoice", "Invoice")
                        .WithMany("ElectronicInvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("electronic_invoice_items_invoice_id_fkey");

                    b.HasOne("SC.v1.Data.Domain.Models.Inventory", "Product")
                        .WithMany("ElectronicInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("electronic_invoice_items_product_id_fkey");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Inventory", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.Category", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("inventory_category_id_fkey");

                    b.HasOne("SC.v1.Data.Domain.Models.Color", "Color")
                        .WithMany("Inventories")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("inventory_color_id_fkey");

                    b.HasOne("SC.v1.Data.Domain.Models.Size", "Size")
                        .WithMany("Inventories")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("inventory_size_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Payroll", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.Transaction", "Transaction")
                        .WithMany("Payrolls")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("payroll_transaction_id_fkey");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.PayrollItem", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.ThirdParty", "Employee")
                        .WithMany("PayrollItems")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("payroll_items_employee_id_fkey");

                    b.HasOne("SC.v1.Data.Domain.Models.Payroll", "Payroll")
                        .WithMany("PayrollItems")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("payroll_items_payroll_id_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Transaction", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transactions_type_id_fkey");

                    b.HasOne("SC.v1.Data.Domain.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transactions_user_id_fkey");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.TransactionLine", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.Transaction", "Transaction")
                        .WithMany("TransactionLines")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transaction_lines_transaction_id_fkey");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.User", b =>
                {
                    b.HasOne("SC.v1.Data.Domain.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("users_company_id_fkey");

                    b.HasOne("SC.v1.Data.Domain.Models.UserRoles", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("users_user_role_id_fkey");

                    b.Navigation("Company");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Category", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Color", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ElectronicInvoice", b =>
                {
                    b.Navigation("ElectronicInvoiceItems");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Inventory", b =>
                {
                    b.Navigation("ElectronicInvoiceItems");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Payroll", b =>
                {
                    b.Navigation("PayrollItems");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Size", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.ThirdParty", b =>
                {
                    b.Navigation("PayrollItems");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.Transaction", b =>
                {
                    b.Navigation("ElectronicInvoices");

                    b.Navigation("Payrolls");

                    b.Navigation("TransactionLines");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SC.v1.Data.Domain.Models.UserRoles", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
